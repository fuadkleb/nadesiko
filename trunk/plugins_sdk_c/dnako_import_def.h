
///
/// dnako.dll の API を定義したもの
/// generated by DLL宣言抜き出しC.nako
///

/// APIの定義
//●なでしこのシステムをリセットする
DNAKO_DEF void(__stdcall *nako_resetAll)(void);
//●なでしこのシステムを解放する
DNAKO_DEF void(__stdcall *nako_free)(void);
//●『なでしこ』のソースファイルを読み込む
DNAKO_DEF DWORD(__stdcall *nako_load)(char*);
//●『なでしこ』のソースファイルを読み込む
DNAKO_DEF DWORD(__stdcall *nako_loadSource)(char*);
//●nako_load() で読んだソースファイルを実行する
DNAKO_DEF DWORD(__stdcall *nako_run)(void);
//●nako_load() で読んだソースファイルを実行する
DNAKO_DEF PHiValue(__stdcall *nako_run_ex)(void);
//●エラーで止まった実行を続ける
DNAKO_DEF DWORD(__stdcall *nako_error_continue)(void);
//●エラーメッセージを取得する。戻り値にはエラーメッセージの長さを返す。
DNAKO_DEF DWORD(__stdcall *nako_getError)(char*,int);
//●現在表示されているエラー情報を消す。
DNAKO_DEF void(__stdcall *nako_clearError)(void);
//●source に与えられた文字列をプログラムとして評価して結果を返す
DNAKO_DEF PHiValue(__stdcall *nako_eval)(char*);
//●source に与えられた文字列をプログラムとして評価して実行結果と成功したかどうかを返す
DNAKO_DEF BOOL(__stdcall *nako_evalEx)(char*,PHiValue*);
//●ファイル関連の命令を使えるようにシステムに登録する。
DNAKO_DEF void(__stdcall *nako_addFileCommand)(void);
//●なでしこに登録されている変数のポインタを取得する
DNAKO_DEF PHiValue(__stdcall *nako_getVariable)(char*);
//●なでしこに変数を登録する(グローバルとして)
DNAKO_DEF void(__stdcall *nako_setVariable)(char*,PHiValue);
//●独自関数を追加する
DNAKO_DEF DWORD(__stdcall *nako_addFunction)(char*,char*,THimaSysFunction,int);
//●独自関数を追加する
DNAKO_DEF DWORD(__stdcall *nako_addFunction2)(char*,char*,THimaSysFunction,int,char*);
//●nako_addFunction で登録したコールバック関数から引数を取り出すのに使う
DNAKO_DEF PHiValue(__stdcall *nako_getFuncArg)(DWORD,int);
//●変数『それ』へのポインタを取得する
DNAKO_DEF PHiValue(__stdcall *nako_getSore)(void);
//●整数型の変数をシステムに追加する。(tagには希望の単語IDを指定)
DNAKO_DEF void(__stdcall *nako_addIntVar)(char*,int,int);
//●文字列型の変数をシステムに追加する。
DNAKO_DEF void(__stdcall *nako_addStrVar)(char*,char*,int);
//●システムの実行を中止する
DNAKO_DEF void(__stdcall *nako_stop)(void);
//●システムの実行を継続する
DNAKO_DEF void(__stdcall *nako_continue)(void);
//●単語管理用IDから単語名を取得する。戻り値は常に単語の長さを返す。
DNAKO_DEF DWORD(__stdcall *nako_id2tango)(DWORD,char*,DWORD);
//●単語名から単語管理用IDを取得する
DNAKO_DEF DWORD(__stdcall *nako_tango2id)(char*);
//●PHiValueを文字列に変換してstrにコピーする。
DNAKO_DEF DWORD(__stdcall *nako_var2str)(PHiValue,char*,DWORD);
//●PHiValueをヌル終端文字列に変換してstrにコピーする。内容が途中で途切れる可能性もある。
DNAKO_DEF DWORD(__stdcall *nako_var2cstr)(PHiValue,char*,DWORD);
//●PHiValueをLongintに変換して得る
DNAKO_DEF int(__stdcall *nako_var2int)(PHiValue);
//●PHiValueをDoubleに変換して得る
DNAKO_DEF Double(__stdcall *nako_var2double)(PHiValue);
//●PHiValueをExtendedに変換して得る
DNAKO_DEF Extended(__stdcall *nako_var2extended)(PHiValue);
//●ヌル文字列を PHiValue に変換してセット
DNAKO_DEF void(__stdcall *nako_str2var)(char*,PHiValue);
//●バイナリデータを文字列としてvalueにセット
DNAKO_DEF void(__stdcall *nako_bin2var)(char*,DWORD,PHiValue);
//●ヌル文字列を PHiValue に変換してセット
DNAKO_DEF void(__stdcall *nako_int2var)(int,PHiValue);
//●ヌル文字列を PHiValue に変換してセット
DNAKO_DEF void(__stdcall *nako_double2var)(Double,PHiValue);
//●新規 PHiValue の変数を作成する。nameにnilを渡すと変数名をつけないで値だけ作成し変数名をつけるとグローバル変数として登録する。
DNAKO_DEF PHiValue(__stdcall *nako_var_new)(char*);
//●変数 value の値をクリアする
DNAKO_DEF void(__stdcall *nako_var_clear)(PHiValue);
//●変数 value の値を解放する
DNAKO_DEF void(__stdcall *nako_var_free)(PHiValue);
//●v を配列として v[index]の値を得る
DNAKO_DEF PHiValue(__stdcall *nako_ary_get)(PHiValue,int);
//●v を二次元配列として v[Row][Col]の値を得る
DNAKO_DEF PHiValue(__stdcall *nako_ary_getCsv)(PHiValue,int,int);
//●v の配列の要素数を得る
DNAKO_DEF int(__stdcall *nako_ary_count)(PHiValue);
//●PHiValue型の変数の内容をまるまるコピーする
DNAKO_DEF void(__stdcall *nako_varCopyData)(PHiValue,PHiValue);
//●PHiValue型の変数の内容をコピーする(原始型のみ複製)
DNAKO_DEF void(__stdcall *nako_varCopyGensi)(PHiValue,PHiValue);
//●メインウィンドウハンドルを設定する（ダイアログ表示関連の命令で利用）
DNAKO_DEF void(__stdcall *nako_setMainWindowHandle)(int);
//●メインウィンドウハンドルを取得する（ダイアログ表示関連の命令で利用）
DNAKO_DEF DWORD(__stdcall *nako_getMainWindowHandle)(void);
//●グループのメンバを取得する。メンバが存在しなければnilが返る。
DNAKO_DEF PHiValue(__stdcall *nako_getGroupMember)(char*,char*);
//●グループのメンバを取得する。メンバが存在しなければnilが返る。
DNAKO_DEF PHiValue(__stdcall *nako_hasEvent)(char*,char*);
//●変数名vnameにゲッターセッターを設定する
DNAKO_DEF void(__stdcall *nako_addSetterGetter)(char*,char*,char*,DWORD);
//●デバッグ中のエディタハンドルを設定する
DNAKO_DEF void(__stdcall *nako_setDebugEditorHandle)(DWORD);
//●デバッグ中のエディタへ行番号を表示するか
DNAKO_DEF void(__stdcall *nako_setDebugLineNo)(BOOL);
//●変数vをグループ型に変更する
DNAKO_DEF void(__stdcall *nako_group_create)(PHiValue);
//●グループ変数groupにメンバmemberを追加する
DNAKO_DEF void(__stdcall *nako_group_addMember)(PHiValue,PHiValue);
//●グループ変数groupのメンバmemberNameを検索する
DNAKO_DEF PHiValue(__stdcall *nako_group_findMember)(PHiValue,char*);
//●グループ変数groupのメンバmemberNameがイベントならば実行し結果を返す
DNAKO_DEF PHiValue(__stdcall *nako_group_exec)(PHiValue,char*);
//●nako_loadした構文木を再度ソースに変換する
DNAKO_DEF DWORD(__stdcall *nako_debug_nadesiko)(char*,DWORD);
//●p を配列として生成する
DNAKO_DEF void(__stdcall *nako_ary_create)(PHiValue);
//●p を配列として生成する
DNAKO_DEF void(__stdcall *nako_ary_add)(PHiValue,PHiValue);
//●命令タグが重複してないかチェック
DNAKO_DEF void(__stdcall *nako_check_tag)(DWORD,DWORD);
//●次の命令で終了する
DNAKO_DEF void(__stdcall *nako_DebugNextStop)(void);
//●プラグインを取り込む
DNAKO_DEF void(__stdcall *nako_LoadPlugins)(void);
//●実行ファイル fname のパックファイルを開く。失敗なら、0を返す。
DNAKO_DEF int(__stdcall *nako_openPackfile)(char*);
//●nako_openPackfile で開いたファイルにある nadesiko.nako を開いて実行する。失敗は、nako_NGを返す。
DNAKO_DEF DWORD(__stdcall *nako_runPackfile)(void);
//●packname のパックファイルを開く。失敗なら、0を返す。
DNAKO_DEF int(__stdcall *nako_openPackfileBin)(char*);
//●実行ファイルのパックファイルを閉じる（後片付け）。失敗なら、0を返す。
DNAKO_DEF int(__stdcall *nako_closePackfile)(char*);
//●実行ファイルにした時、パックファイルの操作に必要な、TMixFileReaderのハンドルを返す。
DNAKO_DEF int(__stdcall *nako_getPackFileHandle)(void);
//●実行ファイルにした時で、実行ファイル側でパックファイルを開いた場合この関数を呼ぶ
DNAKO_DEF void(__stdcall *nako_setPackFileHandle)(DWORD);
//●取り込んだファイル、プラグインのレポートを作成する
DNAKO_DEF void(__stdcall *nako_makeReport)(char*);
//●DLLを利用したことを明示する..レポートに加える
DNAKO_DEF void(__stdcall *nako_reportDLL)(char*);
//●指定したプラグインが使われているか？
DNAKO_DEF BOOL(__stdcall *nako_hasPlugins)(char*);
//●値vをハッシュ形式に変換する
DNAKO_DEF void(__stdcall *nako_hash_create)(PHiValue);
//●hashのkeyの値を取得する
DNAKO_DEF PHiValue(__stdcall *nako_hash_get)(PHiValue,char*);
//●hashのkeyにvalueを設定する
DNAKO_DEF void(__stdcall *nako_hash_set)(PHiValue,char*,PHiValue);
//●hashのkey一覧を得る
DNAKO_DEF int(__stdcall *nako_hash_keys)(PHiValue,char*,int);
//●現在の実行行を得る
DNAKO_DEF void(__stdcall *nako_getLineNo)(int*,int*);
//●現在の実行行を得る
DNAKO_DEF DWORD(__stdcall *nako_getSourceText)(int,char*,DWORD);
//●fileno からファイル名を得る
DNAKO_DEF DWORD(__stdcall *nako_getFilename)(int,char*,DWORD);
//●イベントの実行前に実行フラグを退避しておきたいときに使う
DNAKO_DEF void(__stdcall *nako_pushRunFlag)(void);
//●イベントの実行前に実行フラグを退避したものを戻すときに使う
DNAKO_DEF void(__stdcall *nako_popRunFlag)(void);
//●なでしこのシステム関数をIDを指定して呼ぶ
DNAKO_DEF PHiValue(__stdcall *nako_callSysFunction)(DWORD,PHiValue);
//●dnako.dll をロードしたときに、そのハンドルをセットする
DNAKO_DEF void(__stdcall *nako_setDNAKO_DLL_handle)(DWORD);
//●plug-ins フォルダを指定する
DNAKO_DEF void(__stdcall *nako_setPluginsDir)(char*);
//●plug-ins フォルダを取得する
DNAKO_DEF char*(__stdcall *nako_getPluginsDir)(void);
//●テスト
DNAKO_DEF void(__stdcall *test)(void);
//●なでしこのバージョンを文字列で得る
DNAKO_DEF char*(__stdcall *nako_getVersion)(void);
//●なでしこの更新日を文字列で得る
DNAKO_DEF char*(__stdcall *nako_getUpdateDate)(void);
//●なでしこのGUIDを返す
DNAKO_DEF char*(__stdcall *nako_getNADESIKO_GUID)(void);
//●実行ファイルに埋め込まれたリソースがあればファイルを返す
DNAKO_DEF BOOL(__stdcall *nako_getEmbedFile)(char*,char*,DWORD);
//●最後に実行したユーザー関数を得る
DNAKO_DEF DWORD(__stdcall *nako_getLastUserFuncID)(void);
//●ライセンスされているか確認する
DNAKO_DEF DWORD(__stdcall *nako_checkLicense)(char*,char*);
//●ライセンスコードを書き込む
DNAKO_DEF DWORD(__stdcall *nako_registerLicense)(char*,char*);


